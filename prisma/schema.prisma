generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String
  name         String?
  username     String   @unique
  password     String
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Refresh token
  refreshToken RefreshToken[]

  // Tweet
  tweet Tweet[]

  // MediaFiles
  mediaFiles MediaFile[]
}

model RefreshToken {
  id       String   @id @default(uuid()) @db.Uuid
  token    String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id])
}

model Tweet {
  id        String   @id @default(uuid()) @db.Uuid
  text      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.Uuid

  replyToId String?  @db.Uuid
  replyTo   Tweet?   @relation("replies", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Tweet[]  @relation("replies")

  // MediaFiles
  mediaFiles MediaFile[]
}

model MediaFile {
  id               String   @id @default(uuid()) @db.Uuid
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user     User       @relation(fields: [userId], references: [id])
  userId   String    @db.Uuid

  // Tweets
  tweet    Tweet?     @relation(fields: [tweetId], references: [id])
  tweetId  String?    @db.Uuid
}
